[{"C:\\WebDev\\tanveer-life-quality\\src\\index.js":"1","C:\\WebDev\\tanveer-life-quality\\src\\App.js":"2","C:\\WebDev\\tanveer-life-quality\\src\\components\\Header.js":"3","C:\\WebDev\\tanveer-life-quality\\src\\components\\CityData.js":"4","C:\\WebDev\\tanveer-life-quality\\src\\components\\UrbanScores.js":"5","C:\\WebDev\\tanveer-life-quality\\src\\components\\UrbanSalaries.js":"6","C:\\WebDev\\tanveer-life-quality\\src\\components\\Footer.js":"7","C:\\WebDev\\tanveer-life-quality\\src\\components\\Flag.js":"8"},{"size":207,"mtime":1610264264083,"results":"9","hashOfConfig":"10"},{"size":3079,"mtime":1610264264078,"results":"11","hashOfConfig":"10"},{"size":2003,"mtime":1610397973949,"results":"12","hashOfConfig":"10"},{"size":5058,"mtime":1610264335028,"results":"13","hashOfConfig":"10"},{"size":4019,"mtime":1610264264083,"results":"14","hashOfConfig":"10"},{"size":3352,"mtime":1610264264083,"results":"15","hashOfConfig":"10"},{"size":320,"mtime":1610264264083,"results":"16","hashOfConfig":"10"},{"size":1277,"mtime":1610264264078,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"10m3msi",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\WebDev\\tanveer-life-quality\\src\\index.js",[],["36","37"],"C:\\WebDev\\tanveer-life-quality\\src\\App.js",[],"C:\\WebDev\\tanveer-life-quality\\src\\components\\Header.js",[],"C:\\WebDev\\tanveer-life-quality\\src\\components\\CityData.js",[],"C:\\WebDev\\tanveer-life-quality\\src\\components\\UrbanScores.js",["38"],"import axios from 'axios'\r\nimport React, { Component } from \"react\";\r\nimport Chart from 'chart.js';\r\n\r\nclass UrbanScores extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          urbanScores: []//stores data on urban area scores\r\n        };\r\n\r\n        this.getScores = this.getScores.bind(this);\r\n    }\r\n\r\n    //retrieves data from Teleport API urban area's scores\r\n    getScores = () => {\r\n        if (this.props.data !== undefined){\r\n            axios.get(this.props.data._links[\"ua:scores\"].href)\r\n            .then((scores) =>{\r\n                this.setState({urbanScores: scores.data.categories})\r\n\r\n                //the following code chart that displays the scores, made using Chart.js\r\n                if (this.props.data !== undefined){\r\n                    var ctx = document.getElementById('myChart').getContext('2d');\r\n                    var myChart = new Chart(ctx, {\r\n                        type: 'horizontalBar',\r\n                        data: {\r\n                            labels: this.state.urbanScores.map(result => (result.name)),\r\n                            datasets: [{\r\n                                label: 'Score out of 10',\r\n                                data: this.state.urbanScores.map(result => (result.score_out_of_10)),\r\n                                backgroundColor: this.state.urbanScores.map(result => (result.color)),\r\n                                borderWidth: 1\r\n                            }]\r\n                        },\r\n                    });\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n        } \r\n        \r\n        else {\r\n            this.setState({ urbanScores: []});\r\n        }\r\n    }\r\n\r\n    //retreving urban area score data on mount\r\n    componentDidMount = () => {\r\n        this.getScores()\r\n    } \r\n\r\n    //updating urban area score on re-render\r\n    componentDidUpdate = (prevProps) => {\r\n        if (this.props.data !== prevProps.data) {\r\n            this.getScores()\r\n        }\r\n    }\r\n    \r\n    //renders score table and graph\r\n    render() {\r\n        return(\r\n            <div className=\"text-center\">\r\n                {this.props.data !== undefined ? (//data can only be rendered for urban areas that have data\r\n                    <div className=\"text\">\r\n                        <p className=\"text-center data-header\"> Quality of Life for the Urban Area: {this.props.data.full_name}</p>\r\n                        <canvas id=\"myChart\" width=\"400\" height=\"840\"></canvas>\r\n                        <table className=\"table table-striped\">\r\n                            <thead>\r\n                                <tr className=\"table\">\r\n                                    <th className=\"table-primary\">Category</th>\r\n                                    <th className=\"table-primary\">Score (out of 10)</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"container\">{this.state.urbanScores.map((result, i) => (\r\n                                <tr key={`category ${i}`}> \r\n                                    <td>{result.name}</td>\r\n                                    {result.score_out_of_10 >= 7 ? ( //green (good) for scores 7 and above\r\n                                    <td className=\"table-success \">{(result.score_out_of_10).toFixed(2)}</td> \r\n                                    ) : result.score_out_of_10 <= 3 ? (//red (bad) for scores 3 and below\r\n                                    <td className=\"table-danger \">{(result.score_out_of_10).toFixed(2)}</td>\r\n                                    ) : <td className=\"table-warning \">{(result.score_out_of_10).toFixed(2)}</td>}\r\n                                </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div> \r\n                ) : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UrbanScores","C:\\WebDev\\tanveer-life-quality\\src\\components\\UrbanSalaries.js",[],"C:\\WebDev\\tanveer-life-quality\\src\\components\\Footer.js",[],"C:\\WebDev\\tanveer-life-quality\\src\\components\\Flag.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":26,"column":25,"nodeType":"45","messageId":"46","endLine":26,"endColumn":32},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'myChart' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]